#!/bin/sh

repo="gitutils-testrun"
d="/tmp/$repo"

pass=0
fail=0
tests=0

cleanup() {
  rm -rf $d
  # cache buster, always use $repo for repo folder
  rm -f /tmp/git_cautious_check_remote/${repo}-*
}


# run  regex_expectation  setup_functions..
run() {
  local cmd= result= pattern=
  pattern=$1
  shift
  cmd="$@"
  printf "${cmd}: "
  cleanup
  mkdir -p $d
  result=$(
    cd $d
    while [ -n "$1" ]
    do
      $1 >/dev/null 2>/dev/null
      shift
    done
    git_prompt 2>&1
  )
  if echo $result | egrep -qx "$pattern"
  then
    pass=$(( $pass + 1 ))
    printf "pass\n"
  else
    fail=$(( $fail + 1 ))
    printf "$FAIL\n  expected: $pattern\n  got: $result\n"
  fi
  tests=$(( $tests + 1 ))
}

summary() {
  echo "passed $pass of $tests"
  [ $fail -gt 0 ] && echo "FAILED $fail" && return 1
  return 0
}


# git setup functions

detached() {
  local sha=
  git init
  touch a
  git add a
  git commit -m "a"
  sha=$( git log --oneline | awk '{print $1}' )
  git checkout $sha
}

init() {
  git init
}

pre_first_add() {
  git init
  touch a
}

pre_first_commit() {
  git init
  touch a
  git add a
}

pre_second_add() {
  git init
  touch a b
  git add a
  git commit -m "a"
}

pre_second_commit() {
  git init
  touch a b
  git add a
  git commit -m "a"
  git add b
}

branch() {
  git checkout -b zippy
}

broken_upstream() {
  git init
  # this tricks my code into thinking upstream is there, but it isn't
  git remote add origin /dev/null
}

_create_conflict() {
  # point "zippy" and "master" to initial rev
  git init
  touch a
  git add a
  git commit -m "first rev"
  git branch zippy

  # then alter both in conflicting ways
  echo master > a
  git commit -a -m master

  git checkout zippy
  echo zippy > a
  git commit -a -m zippy
}

merge_conflict() {
  _create_conflict
  git checkout master
  git merge zippy
}

rebase_conflict() {
  _create_conflict
  git rebase master
}

rebase_merge() {
  _create_conflict
  git rebase -p master
}

cherry_pick() {
  _create_conflict
  git cherry-pick master
}

revert() {
  local sha=
  git init
  touch a
  git add a
  git commit -m a
  sha=$( git log --oneline | awk '{print $1}' )
  git revert -n $sha
}

bisect() {
  git init
  git bisect start
}

_commit() {
  f=${1:-a}
  echo "$f" > "$f"
  git add "$f"
  git commit -m "$f"
}

remote_update() {
  local remote= me=
  remote=${d}/$repo
  me=${d}/me
  mkdir -p $remote
  mkdir -p $me
  cd $remote
  git init
  _commit a
  # clone
  cd $me
  git clone $remote
  # make origin go ahead
  cd $remote
  _commit b
  # here prompt should say pull
  cd ${me}/$repo
}

local_update() {
  local remote= me=
  remote=${d}/$repo
  me=${d}/me
  mkdir -p $remote
  mkdir -p $me
  cd $remote
  git init
  _commit a
  # clone
  cd $me
  git clone $remote
  # go ahead of origin
  cd $repo
  _commit b
  # here prompt should say push
}

# test the test, these should all be caught failures
run "intentional fail" init >/dev/null
run "mixmasterblast" init >/dev/null
run " master" init >/dev/null
run "master " init >/dev/null
if [ $fail -ne 4 -a $pass -ne 0 -a $tests -ne 4 ]
then
  echo tests are not behaving as expected
  exit 1
fi
fail=0
pass=0
tests=0

# run tests here, expecting these to all pass

# simple poking around pre and post first commit because things like git
# rev-list that depend on commits will fail until there is a commit
run "master"        init
run "add master"    pre_first_add
run "add master"    pre_second_add
run "commit master" pre_first_commit
run "commit master" pre_second_commit

# same but with a branch
run "zippy"         init              branch
run "add zippy"     pre_first_add     branch
run "add zippy"     pre_second_add    branch
run "commit zippy"  pre_first_commit  branch
run "commit zippy"  pre_second_commit branch

# get into conflict or multi-step phases
SHA="[a-h0-9]{8}[.]{3}"
run "merge master"       merge_conflict
run "detached head $SHA" detached
run "rebase apply $SHA"  rebase_conflict
run "rebase merge $SHA"  rebase_merge
run "cherry pick zippy"  cherry_pick
run "revert master"      revert
run "bisect master"      bisect

# test remote prompts
run "master"        broken_upstream
run "pull master"   remote_update
run "push master"   local_update

cleanup
summary
